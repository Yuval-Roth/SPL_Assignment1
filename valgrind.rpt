==12186== Memcheck, a memory error detector
==12186== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==12186== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==12186== Command: bin/cRace tests/01.json
==12186== Parent PID: 3135
==12186== 
==12186== Invalid read of size 8
==12186==    at 0x10CE52: Agent::Agent(Agent const&) (Agent.cpp:18)
==12186==    by 0x13D0A3: Coalition::Coalition(Coalition const&) (Coalition.h:8)
==12186==    by 0x13D14F: void std::__new_allocator<Coalition>::construct<Coalition, Coalition const&>(Coalition*, Coalition const&) (new_allocator.h:175)
==12186==    by 0x13C766: void std::allocator_traits<std::allocator<Coalition> >::construct<Coalition, Coalition const&>(std::allocator<Coalition>&, Coalition*, Coalition const&) (alloc_traits.h:516)
==12186==    by 0x13C8E4: void std::vector<Coalition, std::allocator<Coalition> >::_M_realloc_insert<Coalition const&>(__gnu_cxx::__normal_iterator<Coalition*, std::vector<Coalition, std::allocator<Coalition> > >, Coalition const&) (vector.tcc:462)
==12186==    by 0x13C40D: std::vector<Coalition, std::allocator<Coalition> >::push_back(Coalition const&) (stl_vector.h:1287)
==12186==    by 0x13BCBB: Simulation::Simulation(Graph, std::vector<Agent, std::allocator<Agent> >) (Simulation.cpp:10)
==12186==    by 0x11292C: Parser::parseSimulation(nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) (Parser.cpp:102)
==12186==    by 0x111D08: Parser::readSimulation(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (Parser.cpp:10)
==12186==    by 0x13DCA7: main (main.cpp:18)
==12186==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==12186== 
==12186== 
==12186== Process terminating with default action of signal 11 (SIGSEGV)
==12186==  Access not within mapped region at address 0x0
==12186==    at 0x10CE52: Agent::Agent(Agent const&) (Agent.cpp:18)
==12186==    by 0x13D0A3: Coalition::Coalition(Coalition const&) (Coalition.h:8)
==12186==    by 0x13D14F: void std::__new_allocator<Coalition>::construct<Coalition, Coalition const&>(Coalition*, Coalition const&) (new_allocator.h:175)
==12186==    by 0x13C766: void std::allocator_traits<std::allocator<Coalition> >::construct<Coalition, Coalition const&>(std::allocator<Coalition>&, Coalition*, Coalition const&) (alloc_traits.h:516)
==12186==    by 0x13C8E4: void std::vector<Coalition, std::allocator<Coalition> >::_M_realloc_insert<Coalition const&>(__gnu_cxx::__normal_iterator<Coalition*, std::vector<Coalition, std::allocator<Coalition> > >, Coalition const&) (vector.tcc:462)
==12186==    by 0x13C40D: std::vector<Coalition, std::allocator<Coalition> >::push_back(Coalition const&) (stl_vector.h:1287)
==12186==    by 0x13BCBB: Simulation::Simulation(Graph, std::vector<Agent, std::allocator<Agent> >) (Simulation.cpp:10)
==12186==    by 0x11292C: Parser::parseSimulation(nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) (Parser.cpp:102)
==12186==    by 0x111D08: Parser::readSimulation(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (Parser.cpp:10)
==12186==    by 0x13DCA7: main (main.cpp:18)
==12186==  If you believe this happened as a result of a stack
==12186==  overflow in your program's main thread (unlikely but
==12186==  possible), you can try to increase the size of the
==12186==  main thread stack using the --main-stacksize= flag.
==12186==  The main thread stack size used in this run was 8388608.
==12186== 
==12186== HEAP SUMMARY:
==12186==     in use at exit: 86,554 bytes in 102 blocks
==12186==   total heap usage: 153 allocs, 51 frees, 88,156 bytes allocated
==12186== 
==12186== LEAK SUMMARY:
==12186==    definitely lost: 0 bytes in 0 blocks
==12186==    indirectly lost: 0 bytes in 0 blocks
==12186==      possibly lost: 0 bytes in 0 blocks
==12186==    still reachable: 86,554 bytes in 102 blocks
==12186==         suppressed: 0 bytes in 0 blocks
==12186== Reachable blocks (those to which a pointer was found) are not shown.
==12186== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==12186== 
==12186== For lists of detected and suppressed errors, rerun with: -s
==12186== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
